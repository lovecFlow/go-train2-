package main

import "fmt"

//Когда мы вызваем функцию с аргументами, то они копируются в функцию.
func zero(x int) int {
	x = 0
}

func zeroCall() {
	x := 5
	zero(x)
	fmt.Println(x) // x всё еще равен 5
} //В этой программе функция zero не изменяет оригинальную переменную x из функции main. Но что если мы хотим её изменить? Один из способов сделать это — использовать специальный тип данных — указатель:

func zeropointer(xPtr *int) { //Добавили указатель. Он представлен через оператор * за которым кранится тип хранимого значения. В функции zro XPtr является указателем на тип int.
	*xPtr = 0
}
func zeroGetAdress() {
	x := 5
	zero(&x)       //Оператор & нужен для получения адреса перемнной. &x вернет *int, тк x имеет тип int. Теперь мы можем менять переменную.
	fmt.Println(x) // x is 0
}

//Ещё способ -- встроенная функция new.

func one(xPtr *int) {
	*xPtr = 1
}
func getMemoryAndBackPointer() {
	xPtr := new(int) //Принимает аргументом тип, выделяет для него память и возвращает указатель на эту память.
	one(xPtr)
	fmt.Println(*xPtr) // x is 1
}
